Module-Level Functions: set_min_circular_angle(angle: float)   Sets the minimum allowed angle (in degrees) for circular arcs. set_min_circular_edge_length(length: float)   Sets the minimum edge length for circular features. set_circular_segments(number: int)   Defines the number of segments used to approximate circular shapes. get_circular_segments(radius: float)   Retrieves the number of segments based on the given radius. triangulate(polygons, epsilon: float = -1)   Triangulates a list of polygons.   • polygons: List of polygon data.   • epsilon: Tolerance value (default: -1).

Class: Manifold Description: Represents a 3D manifold supporting transformations, boolean operations, refinement, and mesh export.

Constructors:  Manifold()   Default constructor.  Manifold(mesh: Mesh)   Constructs a manifold from a 32-bit Mesh.  Manifold(mesh: Mesh64)   Constructs a manifold from a 64-bit Mesh.

Operators:  m1 + m2  Combine two manifolds.  m1 - m2  Subtract one manifold from another.  m1 ^ m2  Symmetric difference (XOR) of two manifolds.

Methods:  hull() → Manifold   Returns the convex hull of the manifold.  batch_hull(manifolds: List[Manifold]) → Manifold (static)   Computes the convex hull for a list of manifolds.  hull_points(pts: List[Tuple[float, float, float]]) → Manifold (static)   Creates a convex hull from a list of 3D points.  transform(m)   Applies a transformation matrix.  translate(t: Tuple[float, float, float])   Translates by vector t.  scale(v: Tuple[float, float, float])   Scales non-uniformly using vector v.  scale(s: float)   Uniformly scales by scalar s.  mirror(v: Tuple[float, float, float])   Mirrors about the plane defined by normal vector v.  rotate(v: Tuple[float, float, float])   Rotates by degrees around X, Y, and Z axes (v is a 3‑tuple).  warp(warp_func: Callable[[Tuple[float, float, float]], Tuple[float, float, float]])   Applies a per-vertex warp. The callback takes a 3D point and returns a new point.  warp_batch(warp_func: Callable[[VecView[Tuple[float, float, float]]], ndarray])   Applies a batch warp; the callback must return an array of shape (N, 3).  set_properties(new_num_prop: int, f: Callable[[Tuple[float, float, float], ndarray], ndarray])   Sets per-vertex properties. The callback receives a vertex and its old property array, and must return a new property array of length new_num_prop.  calculate_curvature(gaussian_idx: int, mean_idx: int)   Computes curvature values and stores them at the specified property indices.  min_gap(other: Manifold, search_length: float) → float   Returns the minimum gap (between 0 and search_length) between this and another manifold.  calculate_normals(normal_idx: int, min_sharp_angle: float = 60)   Computes normals and stores them at the given index.  smooth_by_normals(normal_idx: int)   Smooths the manifold using computed normals.  smooth_out(min_sharp_angle: float = 60, min_smoothness: float = 0)   Smooths out sharp features.  refine(n: int)   Subdivides the mesh n times.  refine_to_length(length: float)   Refines until edge lengths are approximately the given length.  refine_to_tolerance(tolerance: float)   Refines based on a specified geometric tolerance.  to_mesh(normal_idx: int = -1) → Mesh   Exports the manifold as a 32-bit Mesh.  to_mesh64(normal_idx: int = -1) → Mesh64   Exports the manifold as a 64-bit Mesh.  num_vert() → int   Returns the number of vertices.  num_edge() → int   Returns the number of edges.  num_tri() → int   Returns the number of triangles.  num_prop() → int   Returns the total count of per-vertex properties.  num_prop_vert() → int   Returns the number of properties per vertex.  genus() → int   Computes the genus.  volume() → float   Calculates the volume (clamped to zero if near degenerate).  surface_area() → float   Calculates the surface area.  original_id() → int   Returns the original identifier.  get_tolerance() → float   Retrieves the current tolerance setting.  set_tolerance(tolerance: float)   Sets the tolerance for geometric operations.  as_original() → Manifold   Retrieves the original (unmodified) manifold.  is_empty() → bool   Checks if the manifold is empty.  decompose() → List[Manifold]   Decomposes the manifold into disconnected parts.  split(cutter: Manifold) → Manifold   Splits the manifold using another manifold as a cutter.  split_by_plane(normal: Tuple[float, float, float], origin_offset: float) → Manifold   Splits the manifold by a plane.  trim_by_plane(normal: Tuple[float, float, float], origin_offset: float) → Manifold   Trims the manifold by a plane.  slice(height: float) → CrossSection   Computes a horizontal cross-sectional slice at the given height.  project() → CrossSection   Projects the manifold to 2D and simplifies the result.  status() → int   Returns the status code of the manifold.  bounding_box() → Tuple[float, float, float, float, float, float]   Returns the bounding box as (xmin, ymin, zmin, xmax, ymax, zmax).

Static Methods:  smooth(mesh, sharpened_edges: List[int] = [], edge_smoothness: List[float] = []) → Manifold   Smooths a mesh (either Mesh or Mesh64) with optional per-edge smoothness parameters.  batch_boolean(manifolds: List[Manifold], op: OpType) → Manifold   Performs a batch boolean operation.   • op: One of the OpType enum values (Add, Subtract, Intersect).  compose(manifolds: List[Manifold]) → Manifold   Composes multiple manifolds into one.  tetrahedron() → Manifold   Creates a tetrahedron.  cube(size: Tuple[float, float, float] = (1.0, 1.0, 1.0), center: bool = False) → Manifold   Creates a cube with the specified size; if center is True, the cube is centered at the origin.  extrude(crossSection: CrossSection, height: float, n_divisions: int = 0, twist_degrees: float = 0.0, scale_top: Tuple[float, float] = (1.0, 1.0)) → Manifold   Extrudes a 2D cross section to create a 3D manifold.  revolve(crossSection: CrossSection, circular_segments: int = 0, revolve_degrees: float = 360.0) → Manifold   Revolves a cross section about an axis.  level_set(f: Callable[[float, float, float], float], bounds: List[float], edgeLength: float, level: float = 0.0, tolerance: float = -1) → Manifold   Constructs a manifold using a level-set (signed distance function) approach.   • bounds: List of six numbers [min_x, min_y, min_z, max_x, max_y, max_z].  cylinder(height: float, radius_low: float, radius_high: float = -1.0, circular_segments: int = 0, center: bool = False) → Manifold   Creates a cylinder; if radius_high is negative, a constant radius is used.  sphere(radius: float, circular_segments: int = 0) → Manifold   Creates a sphere.  reserve_ids(n: int)   Reserves n unique identifiers for manifold elements.

Class: Mesh (MeshGL) Description: Mesh representation with vertex properties and triangle indices.

Constructor: Mesh(vert_properties, tri_verts, merge_from_vert = None, merge_to_vert = None, run_index = None, run_original_id = None, run_transform = None, face_id = None, halfedge_tangent = None, tolerance = 0)   • vert_properties: ndarray of float with shape (-1, num_prop)   • tri_verts: ndarray of uint32 with shape (-1, 3)   Other arrays are optional; all inputs are copied into internal storage.

Read-Only Properties:  vert_properties: Vertex property array.  tri_verts: Triangle index array.  run_transform: Transformation data.  halfedge_tangent: Halfedge tangent array.  merge_from_vert, merge_to_vert, run_index, run_original_id, face_id.

Methods:  merge()   Merges vertices as indicated by the merge arrays.

Class: Mesh64 (MeshGL64) Description: Similar to Mesh but uses double-precision (float64) for vertex properties and 64-bit indices.

Constructor and Properties:  Similar to Mesh, with type adjustments (e.g. ndarray of double, ndarray of uint64).

Methods:  merge()   Merges vertices based on the provided arrays.

Enumerations: Error (Manifold.Error)  Values:   NoError   NonFiniteVertex   NotManifold   VertexOutOfBounds   PropertiesWrongLength   MissingPositionProperties   MergeVectorsDifferentLengths   MergeIndexOutOfBounds   TransformWrongLength   RunIndexWrongLength   FaceIDWrongLength   InvalidConstruction

FillRule (CrossSection.FillRule)  Values:   EvenOdd – Only odd-numbered sub-regions are filled.   NonZero – Only regions with non-zero winding are filled.   Positive – Only sub-regions with winding counts > 0 are filled.   Negative – Only sub-regions with winding counts < 0 are filled.

JoinType (CrossSection.JoinType)  Values:   Square – Uniform square join when the internal angle is less than 90°.   Round – Rounded join for convex external angles.   Miter – Miter join with a limit; falls back to square if exceeded.

OpType  Values:   Add   Subtract   Intersect

Class: CrossSection Description: Represents a 2D cross section with non-self-intersecting contours (uses Clipper2 for clipping and offset operations).

Constructors:  CrossSection()   Creates an empty cross section.  CrossSection(contours: List[List[Tuple[float, float]]], fillrule: FillRule = Positive)   Creates from a list of contours (each contour is a list of (x, y) points).

Methods:  area() → float   Returns the area.  num_vert() → int   Returns the number of vertices.  num_contour() → int   Returns the number of contours.  is_empty() → bool   Checks if the cross section is empty.  bounds() → Tuple[float, float, float, float]   Returns the bounding box as (min_x, min_y, max_x, max_y).  translate(v: Tuple[float, float]) → CrossSection   Translates the cross section by vector v.  rotate(degrees: float) → CrossSection   Rotates the cross section by the specified degrees.  scale(scale: Tuple[float, float]) → CrossSection   Applies non-uniform scaling (or scale(s: float) for uniform scaling).  mirror(ax: float) → CrossSection   Mirrors about the specified axis.  transform(m)   Applies a transformation matrix.  warp(warp_func: Callable[[Tuple[float, float]], Tuple[float, float]]) → CrossSection   Warps vertices using the callback.  warp_batch(warp_func: Callable[[VecView[Tuple[float, float]]], ndarray]) → CrossSection   Applies a batch warp; the callback must return an array of shape (N, 2).  simplify(epsilon: float = 1e-6) → CrossSection   Simplifies the contours.  offset(delta: float, join_type: JoinType, miter_limit: float = 2.0, circular_segments: int = 0) → CrossSection   Offsets the contours by delta.  Operators:   cs1 + cs2  Union.   cs1 - cs2  Difference.   cs1 ^ cs2  XOR.  hull() → CrossSection   Computes the convex hull.  batch_hull(cross_sections: List[CrossSection]) → CrossSection (static)   Computes the hull for multiple cross sections.  hull_points(pts: List[Tuple[float, float]]) → CrossSection (static)   Creates a convex hull from a list of 2D points.  decompose() → List[CrossSection]   Decomposes into separate parts.  batch_boolean(cross_sections: List[CrossSection], op: OpType) → CrossSection (static)   Performs a boolean operation on multiple cross sections.  compose(cross_sections: List[CrossSection]) → CrossSection (static)   Composes several cross sections into one.  to_polygons() → List[List[Tuple[float, float]]]   Returns the contours as a list of polygons.

Static Constructors:  square(size: float, center: bool = False) → CrossSection   Creates a square cross section.  circle(radius: float, circular_segments: int = 0) → CrossSection   Creates a circular cross section.